{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red187\green187\blue187;\red255\green255\blue255;\red187\green187\blue187;
}
{\*\expandedcolortbl;;\cssrgb\c78156\c78156\c78156;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c78156\c78156\c78156;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww9680\viewh14840\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb2 ACCEDERE AL DATABASE\cb1 \
Per accedere al database, lo inizializzo in un comando. Per richiamare \'93l\'92istanza\'94 salvo il comando in una variabile:\
	PSQL = \'93psql -X \'97-username=#blabla \'97dbname=#blabka -c\'94\
\
	-X \'97> accedo al file senza copilota di lettura, quindi evito errori dovuti a mal interpretazione del database\
	-c \'97> permette di effettuare solo un comando sul database, poi uscire. In questo modo, se accedo dal terminale, non resto \'93in modalit\'e0 psql\'94, bens\'ec torno alla \'93modalit\'e0 terminale\'94 subito dopo aver eseguito l\'92azione.\
\
\
\cb2 LEGGO UN CSV\cb1 \
cat #filename legge un file in bash\
\
cat #filename | while read #variabili_senza_virgola\
	questa funziona usa un ciclo while per leggere un file e ogni riga viene salvata nella variabili indicate tra gli argomenti, tuttavia ogni variabile viene assegnata ad una parola alla volta.\
\
	\'e8 possibile usare una variabile builtin chiamata IFS che significa Internal Field Separator.\
	IFS serve come \'91separatore\'92 tra una parola e l\'92altra. \
	Posso cambiare IFS con\
	cat #filename | while IFS=\'91#carattere\'92 read #variabili\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \cb3 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \cb2 SCRIVO COMANDI PSQL\cb1 \
I comandi PSQL sono scritti cos\'ec:\
	$PSQL \'93SELECT * FROM #tabella WHERE #condizione\'94\
	\
	nel caso in cui volessi aggiungere una variabile di tipo stringa, questa deve avere gli apici:\
\
	$PSQL \'93INSERT INTO #tabella(#stringa) VALUES(\'91$VARIABILE\'92)\'94\
\
	\'e8 buona prassi ritornare sempre la stringa di ritorno di psql.\
	nel caso di INSERT INTO la stringa \'e8 INSERT 0 1.\
	Per questo uso la sintassi bash e salvo il risultato in una variabile.\
\
	#RISULTATO = $($PSQL \'93#comando\'94)\
\
\
\cb2 REDIRECT OUTPUT\cb1 \
\
	stdout = standard out => stampa su terminale\
	stderr = standard error => stampa su terminale l\'92errore incontrato\
\
	\'e8 possibile indicare una destinazione diverse per i due aggiungendo un comando:	#comando 1> #file	indica dove scrivere il risultato di stdout\
	#comando 2> #file	indica dove stampare il risultato di stderr\
\
\cb2 REDIRECT INPUT\cb1 \
\
	\'e8 possibile anche ridirigere l\'92input da un file ad un comando con:\
	#comando < #file\
\
\cb2 PIPE\cb1 \
	\'e8 possibile concatenare l\'92output di un comando all\'92input di un altro con pipe\
	#comando1 | #comando2\
\
	le variabili passate con pipe non vengono soprascritte in quanto vengono eseguite da una seconda sotto istanza del terminale\
\
\cb2 WORD COUNT\cb1 \
	il comando wc serve a contare il numero di righe, parole, caratteri e/0 byte nel file specificato in input. Con i flag +\'e8 possibile selezionare diversi valori da contare.\
\
\cb4 GREP\cb1 \
\
	il comando grep ricerca dei pattern di testo all\'92interno di un file o di una lista di elementi.\
\
\cb4 SED\cb1 \
	con sed posso sostituire alcune espressioni.\
	sintassi:\
\
	sed \'92s/#espressione da sostituire / #espressione nuova /\'91\
\
	per sostituire tritare alcuni valori, nel caso specifico, ottenere soltanto il numero di righe di un file:\
\
	sed -r \'92s/([0-9]+).*/\\1/\'91\
\
DIFF\
	con diff posso vedere le differenze tra due file cos\'ec:\
\
	diff #file1 #file2}